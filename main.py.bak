from ASTR import *
import os
from env import *

################################ IPv6
astr6 = ASTR('ipv6')# create an ASTR object
# I temperarily only use 1 pfx2as file and 1 file list
# In the future, I will loop over all pfx2as files and file lists
# , and get many ASTR objects each corresponds to a certain time
astr6.get_dict('metadata/6files' + yearmonth6[0][0] + yearmonth6[0][1], 'metadata/routeviews-rv6-' +\
        ymd_pfx2as[0][0] + ymd_pfx2as[0][1] + ymd_pfx2as[0][2] + '-1200.pfx2as', yearmonth6[0])
astr6.get_output('output/6output' + yearmonth6[0][0] + yearmonth6[0][1])# don't change this string
#exists = [10, 100, 1000]
#lvalues = [1, 2, 4]
#dict6 = astr6.set_attri(exists, lvalues)
dict6 = astr6.set_attri()# set attributes of each AS

exist_per_as6 = float(astr6.exist_c)/float(len(dict6.keys()))

################################ IPv4
astr4 = ASTR('ipv4')
astr4.get_dict('metadata/4files' + yearmonth4[0][0] + yearmonth4[0][1] +\
        str(yearmonth4[0][2]), 'metadata/routeviews-rv2-' +\
        ymd_pfx2as[0][0] + ymd_pfx2as[0][1] + ymd_pfx2as[0][2] + '-1200.pfx2as', yearmonth4[0])
astr4.get_output('output/4output' + yearmonth4[0][0] + yearmonth4[0][1] +\
        str(yearmonth4[0][2]))
#exists = [50, 500, 5000]
#lvalues = [1, 2, 4]
#dict4 = astr4.set_attri(exists, lvalues)
dict4 = astr4.set_attri()

exist_per_as4 = float(astr4.exist_c)/float(len(dict4.keys()))

#---------------------------Finding interesting ASes-------------------------------#
print 'analyzing combined v4/v6 results...'
fexist = os.path.exists('output/alloutput')
if fexist == True:
    os.system('rm output/alloutput')
# further research needed in deciding interesting ASes
'''
fexist = os.path.exists('intrestingAS')
if fexist == True:
    os.system('rm intrestingAS')
fexist = os.path.exists('as12in6')
if fexist == True:
    os.system('rm as12in6')
fexist = os.path.exists('as23in6')
if fexist == True:
    os.system('rm as23in6')
f12 = open('as12in6', 'a')
f23 = open('as23in6', 'a')
'''
f = open('output/alloutput', 'a')
# pause anything about levels
'''
# if the same as has different levels in IPv4 and IPv6, store it
count_exist = 0
count_lvalue = 0
count_both = 0
for ASN in dict6.keys():
    if dict6[ASN][-7] == 1:
        #f12.write(ASN + '|' + str(dict6[ASN][0])+ '\n') 
    if dict6[ASN][-8] == 1:
        #f23.write(ASN + '|' + str(dict6[ASN][0]) + '\n') 
    if ASN in dict4.keys():
        if abs(dict6[ASN][-1] - dict4[ASN][-1]) >= 2 or\
        abs(dict6[ASN][-2] - dict4[ASN][-2]) >= 2:
            astr6.print_ASN(f, ASN)
            astr4.print_ASN(f, ASN)
        if abs(dict6[ASN][-1] - dict4[ASN][-1]) >= 2 and\
        abs(dict6[ASN][-2] - dict4[ASN][-2]) >= 2:
            f.write('large value diverse\n')
            count_both += 1
        elif abs(dict6[ASN][-1] - dict4[ASN][-1]) >= 2:
            count_exist += 1
            f.write('existence diverse\n')
        elif abs(dict6[ASN][-2] - dict4[ASN][-2]) >= 2:
            count_lvalue += 1
            f.write('large value diverse\n')
    else:
        pass
        
f.write('count_both = ' + str(count_both) + '\n')
f.write('count_exist = ' + str(count_exist) + '\n')
f.write('count_lvalue = ' + str(count_lvalue) + '\n')
'''
f.write('v6 exist per as: ' + str(exist_per_as6) + '\n')
f.write('v4 exist per as: ' + str(exist_per_as4) + '\n')
f.close()
'''
f12.close()
f23.close()
'''
